<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bienvenidos on Blog sobre sistemas embebidos</title>
    <link>https://eleckia.000webhostapp.com/</link>
    <description>Recent content in Bienvenidos on Blog sobre sistemas embebidos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-mx</language>
    <lastBuildDate>Tue, 04 Jun 2019 20:45:42 +0000</lastBuildDate><atom:link href="https://eleckia.000webhostapp.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Programando Avr en C. Arreglos.</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-arreglos/</link>
      <pubDate>Wed, 01 Jul 2020 23:39:42 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-arreglos/</guid>
      <description>Los arreglos o arrays son elementos que permiten hacer colecciones de datos del tipo indicado, su uso es amplio en prácticamente todos los lenguajes de programación, en C los arreglos se declaran con la siguiente sintaxis,
tipo_dato nombre_array[TAMAÑO]; Por ejemplo para declarar un arreglo de 5 enteros llamado horas:
int horas[5]; Para declarar un arreglo de 3 boleanos llamado respuestas:
#include&amp;lt;stdbool.h&amp;gt; bool respuestas[3]; Los arreglos pueden ser de cualquier tipo de dato.</description>
    </item>
    
    <item>
      <title>Principio de responsabilidad única (SRP)</title>
      <link>https://eleckia.000webhostapp.com/posts/principio-de-responsabilidad-unica-srp/</link>
      <pubDate>Sun, 28 Jun 2020 02:28:46 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/principio-de-responsabilidad-unica-srp/</guid>
      <description>En el desarrollo ágil, el principio de responsabilidad única es uno de los cinco principios fundamentales, el principio define lo siguiente:
Un módulo debe tener un solo motivo para cambiar.
Y eso es todo, ¿fácil no?, yo también lo creo, ¿qué es lo que creo?, no lo entiendo. Vamos por partes, las palabras son obvias, pero la frase es un poco ambigua, el meollo del asunto es claramente un solo motivo para cambiar, podemos apoyarnos en el nombre del principio, responsabilidad única, mmm parece ser que ambas frases se refieren a lo mismo, ¿a qué mismo?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eleckia.000webhostapp.com/posts/464/</link>
      <pubDate>Sat, 27 Jun 2020 23:20:47 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/464/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SOLID</title>
      <link>https://eleckia.000webhostapp.com/posts/solid/</link>
      <pubDate>Sat, 27 Jun 2020 23:19:57 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/solid/</guid>
      <description>_Soy malo y eso es bueno, yo jamás seré bueno y eso no es malo, no hay nadie que quiera ser además de mi. #  - Ralph el demoledor._
SOLID #  Dentro del mundo de la programación existen los famosos paradigmas de programación, entre ellos: la programación funcional, la programación orientada a eventos, la programación estructurada, la programación orientada a objetos y otros más. En esta fecha 2020, la programación orientada a objetos sin duda domina la forma en que se escribe el software en general, vale la pena aprender este paradigma pues no será raro encontrarnos con programas basados en él.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://eleckia.000webhostapp.com/posts/415/</link>
      <pubDate>Sun, 24 May 2020 21:52:48 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/415/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://eleckia.000webhostapp.com/posts/383/</link>
      <pubDate>Sat, 23 May 2020 04:30:43 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/383/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Electrónica</title>
      <link>https://eleckia.000webhostapp.com/posts/electronica/</link>
      <pubDate>Sat, 23 May 2020 04:30:12 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/electronica/</guid>
      <description>Ah, ¿pero que oigo?, una intromisión, debe ser #  Lisa Simpson, la respuesta a una pregunta que
nunca hizo nadie.
-Ned Flanders
 Sigue mi blog #  Recibe nuevo contenido directamente en tu bandeja de entrada.
[jetpack_subscription_form show_only_email_and_button=&amp;ldquo;true&amp;rdquo; custom_background_button_color=&amp;ldquo;undefined&amp;rdquo; custom_text_button_color=&amp;ldquo;undefined&amp;rdquo; submit_button_text=&amp;ldquo;Suscribir&amp;rdquo; submit_button_classes=&amp;ldquo;undefined&amp;rdquo; show_subscribers_total=&amp;ldquo;false&amp;rdquo; ]</description>
    </item>
    
    <item>
      <title>Display Siete Segmentos VI.</title>
      <link>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-vii-display-siete-segmentos/</link>
      <pubDate>Fri, 22 May 2020 07:49:50 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-vii-display-siete-segmentos/</guid>
      <description>La función setNumber puede ser mejorada, antes de ello quiero hacer una modificación de diseño, el módulo display7 hace varias cosas, configura los puertos, convierte de decimal a la colección adecuada de pines de salida y finalmente escribe las salidas a los puertos, este último par de acciones en nuestra implementación se realizan en la misma función setNumber, se recomienda que las funciones sean responsables de una sola acción bien definida.</description>
    </item>
    
    <item>
      <title>Display Siete Segmentos V.</title>
      <link>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-vi-display-siete-segmentos/</link>
      <pubDate>Thu, 21 May 2020 06:09:36 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-vi-display-siete-segmentos/</guid>
      <description>Continuamos refactorizando el código para evitar repeticiones y ganar legibilidad, retomando.
//display7.c #include&amp;quot;display7.h&amp;quot; #include&amp;lt;avr/io.h&amp;gt; #define led\_A (1&amp;lt;&amp;lt;PD2) #define led\_B (1&amp;lt;&amp;lt;PD3) #define led\_C (1&amp;lt;&amp;lt;PD4) #define led\_D (1&amp;lt;&amp;lt;PD5) #define led\_E (1&amp;lt;&amp;lt;PD6) #define led\_F (1&amp;lt;&amp;lt;PD7) #define led\_G (1&amp;lt;&amp;lt;PB2) static void pinoutAsOutputs(void) { //pinout como salidas DDRB |= led\_G; DDRD |= led\_A|led\_B|led\_C| led\_D|led\_E|led\_F; } static void pinoutLevelLow(void) { //pinout nivel bajo PORTB &amp;amp;= ~led\_G; PORTD &amp;amp;= ~(led\_A|led\_B|led\_C| led\_D|led\_E|led\_F); } static void pinoutAsInputs(void) { //pinout como entradas DDRB &amp;amp;= ~led\_G; DDRD &amp;amp;= ~(led\_A|led\_B|led\_C| led\_D|led\_E|led\_F); } void display7\_init(void) { pinoutAsOutputs(); pinoutLevelLow(); } void display7\_destroy(void) { pinoutAsInputs(); pinoutLevelLow(); } void display7\_setNumber(short number) { if(number == 0){ PORTB &amp;amp;= ~led\_G; //LED G apagado PORTD |= led\_A|led\_B|led\_C| led\_D|led\_E|led\_F; }else if(number == 1){ PORTB &amp;amp;= ~led\_G; PORTD &amp;amp;= ~(led\_A| led\_D|led\_E|led\_F); PORTD |= led\_B|led\_C;//LED B y C encendido } //.</description>
    </item>
    
    <item>
      <title>Programando Avr en C.- Apuntadores, punteros, pointers III. Apuntadores Dobles.</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-apuntadores-punteros-pointers-ii-apuntadores-dobles/</link>
      <pubDate>Wed, 20 May 2020 04:19:41 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-apuntadores-punteros-pointers-ii-apuntadores-dobles/</guid>
      <description>Los apuntadores suenan bastante complejos, nuestro cerebro amplifica su complejidad, pero al igual que cualquier otra variable su funcionamiento es simple,
tipo ** nombre_apuntador; a que me refiero con apuntador doble, a un apuntador que guarda direcciones de otros apuntadores de su mismo tipo,
char caracter1 = &#39;a&#39;; char caracter2 = &#39;b&#39;; char \* letra = &amp;amp;caracter1; char \*\* apuntador\_doble = &amp;amp;letra; \*apuntador\_doble = &amp;amp;caracter2; //ahora letra apunta a la dirección de caracter2, //\*letra es &#39;b&#39; el propósito evidente de los apuntadores dobles, es cambiar el valor a donde apuntan apuntadores simples,</description>
    </item>
    
    <item>
      <title>Programando Avr en C.- Apuntadores, punteros, pointers II. Apuntadores a funciones.</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-apuntadores-punteros-pointers-ii-apuntadores-a-funciones/</link>
      <pubDate>Wed, 20 May 2020 03:44:43 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-apuntadores-punteros-pointers-ii-apuntadores-a-funciones/</guid>
      <description>Como ya he dicho un apuntador es una variable que apunta a direcciones de memoria, también hemos mencionado que los apuntadores deben ser especificados sobre el tipo, cuando las funciones se compilan se les asigna una dirección en memoria, ¿existirán apuntadores a funciones?, la respuesta es afirmativa, la sintaxis es un poco rara,
tipo (*nombre_apuntador)(argumento1, argumento2, ..., argumento_n); al igual que los apuntadores comunes, los apuntadores a funciones deben ser especificados con el tipo de dato que regresan, entre parentesis se coloca el operador * seguido del nombre del apuntador, finalmente se especifican los parámetros)</description>
    </item>
    
    <item>
      <title>Display Siete Segmentos IV.</title>
      <link>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-v-display-siete-segmentos/</link>
      <pubDate>Sat, 16 May 2020 22:06:49 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-v-display-siete-segmentos/</guid>
      <description>Nuestro trabajo consiste en implementar las funciones del módulo contamos con un par de funciones, una para iniciar y otra para cerrar el módulo y una tercera para establecer el número, la interfaz es muy sencilla y para nuestro propósito es más que suficiente.
La mayor parte del trabajo recae en la tercer función y la dejamos para el final. Es muy común que los módulos contengan dos funciones, init y close o create y destroy, el trabajo de estas dos funciones es llevar al módulo a un estado conocido y liberar los recursos respectivamente.</description>
    </item>
    
    <item>
      <title>Programando Avr en C.- Apuntadores, punteros, pointers I.</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-apuntadores-punteros-pointers/</link>
      <pubDate>Sat, 16 May 2020 21:27:18 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-apuntadores-punteros-pointers/</guid>
      <description>Los apuntadores (pienso que esta es la traducción más acertada), también conocidos como punteros o pointers en ingles, es un tipo de dato característico de lenguajes de bajo nivel y algunos de nivel medio, C por supuesto cuenta con tal tipo de dato.
Un apuntador es una variable cuyo tipo de dato almacena direcciones de memoria, tan simple como eso. Aunque una dirección de memoria puede ser interpretada como un entero, es mejor pensar que una dirección de memoria es un tipo de dato diferente, un tipo de dato de tipo apuntador.</description>
    </item>
    
    <item>
      <title>Contacto</title>
      <link>https://eleckia.000webhostapp.com/posts/contacto/</link>
      <pubDate>Fri, 15 May 2020 22:25:13 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/contacto/</guid>
      <description>Hablemos 👋. No dudes en ponerte en contacto con nosotros mediante la información de contacto a continuación, o envíanos un mensaje mediante el formulario.
Ponte en contacto con nosotros #  Calle Ejemplo, 10
Ciudad, 10100
España
correoelectronico@ejemplo.com
(+34) 399 555 234
Envíanos un mensaje #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://eleckia.000webhostapp.com/posts/264/</link>
      <pubDate>Mon, 11 May 2020 06:05:40 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/264/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GPIO</title>
      <link>https://eleckia.000webhostapp.com/posts/gpio/</link>
      <pubDate>Mon, 11 May 2020 05:51:01 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/gpio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GPIO atmega328p.</title>
      <link>https://eleckia.000webhostapp.com/posts/gpio-atmega328p/</link>
      <pubDate>Mon, 11 May 2020 05:26:43 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/gpio-atmega328p/</guid>
      <description>_Si, se nos acabo la duela y pintamos la tierra, ¿qué trucazo no? #  Moe Szyslak_
 Sigue mi blog #  Recibe nuevo contenido directamente en tu bandeja de entrada.
[jetpack_subscription_form subscribe_placeholder=&amp;ldquo;Dirección de correo electrónico&amp;rdquo; show_subscribers_total=&amp;ldquo;false&amp;rdquo; button_on_newline=&amp;ldquo;true&amp;rdquo; submit_button_text=&amp;ldquo;Suscribir&amp;rdquo; custom_background_emailfield_color=&amp;ldquo;undefined&amp;rdquo; custom_background_button_color=&amp;ldquo;undefined&amp;rdquo; custom_text_button_color=&amp;ldquo;undefined&amp;rdquo; custom_font_size=&amp;ldquo;16&amp;rdquo; custom_border_radius=&amp;ldquo;0&amp;rdquo; custom_border_weight=&amp;ldquo;1&amp;rdquo; custom_border_color=&amp;ldquo;undefined&amp;rdquo; custom_padding=&amp;ldquo;15&amp;rdquo; custom_spacing=&amp;ldquo;10&amp;rdquo; submit_button_classes=&amp;ldquo;has-text-color has-background-color has-background has-primary-background-color&amp;rdquo; email_field_classes=&amp;quot;&amp;quot; show_only_email_and_button=&amp;ldquo;true&amp;rdquo; ]</description>
    </item>
    
    <item>
      <title>Display Siete Segmentos III.</title>
      <link>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-iv-display-siete-segmentos/</link>
      <pubDate>Mon, 11 May 2020 04:53:21 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-iv-display-siete-segmentos/</guid>
      <description>No se si ya lo había mencionado pero odio el entorno de desarrollo de arduino, en esta ocasión por la forma tan pobre de manejar ficheros. Continuando la entrada anterior, vamos a mover nuestro módulo en un par de archivos, creamos dos ficheros cuyo nombre deje en claro que hay escrito en él, un buen nombre es display7,
$touch display7.c $touch display7.h ahora en nuestro entorno de desarrollo incluimos los dos ficheros, para ello vamos al menú Programa-&amp;gt;Añadir fichero y añadimos ambos ficheros, ambos aparecerán en nuestro entorno de desarrollo y podrán ser editados desde el mismo, movemos el módulo a los nuevos ficheros, los prototipos van en él .</description>
    </item>
    
    <item>
      <title>Display Siete Segmentos II.</title>
      <link>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-iii-display-siete-segmentos/</link>
      <pubDate>Sun, 10 May 2020 07:57:36 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-iii-display-siete-segmentos/</guid>
      <description>Nuestro anterior programa sirve para dos cosas, para nada y para la basura, no hay ninguna diferencia con respecto a conectar los pines del display directamente a Vcc, requerimos funcionalidad, que el microcontrolador haga lo adecuado para mostrar el número que nosotros indiquemos y que nosotros hagamos el mínimo trabajo para indicarlo, algo similar a
setNumber(3); //Muestra el número 3 en el display de esta forma podemos realizar una secuencia de números</description>
    </item>
    
    <item>
      <title>Programando Avr en C.- El flujo del programa, if, else, if else.</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-el-flujo-del-programa-if-else-if-else/</link>
      <pubDate>Sun, 28 Jul 2019 02:55:18 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-el-flujo-del-programa-if-else-if-else/</guid>
      <description>Definimos el flujo del programa como, la ruta que toma la ejecución del mismo, imaginemos que tenemos una lista de tareas que debemos ejecutar, digamos, tarea 1, tarea 2, tarea 3, &amp;hellip;, tarea n, ya vimos que podemos abstraer tareas como funciones, entonces simplemente podemos agregar cada una de las funciones en orden para ejecutarlas,
int main(void) { tarea1(); tarea2(); tarea3(); tarean(); return 0; } pero que pasa si queremos ejecutar alguna de estas tareas solo si se cumple una condición, digamos, solo si se pulsa un botón determinado, o solo si el resultado de una operación satisface algún requerimiento.</description>
    </item>
    
    <item>
      <title>Programando Avr en C.- Constantes</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-constantes/</link>
      <pubDate>Wed, 10 Jul 2019 13:23:09 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-constantes/</guid>
      <description>Las constantes son de gran utilidad en la programación, a diferencia de las variables, las constantes no pueden cambiar su valor.
Las dos formas más comunes de definir constantes son con la palabra reservada const y con la directiva define.
La palabra const #  Agregando la palabra const a la declaración de una variable, esta se convierte en constate, sin embargo también debe asignarle el valor al momento de la declaración;</description>
    </item>
    
    <item>
      <title>Programando Avr en C.- Tipo de dato Booleano, operadores booleanos y de comparación.</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-tipo-de-dato-booleano-operadores-booleanos-y-de-comparacion/</link>
      <pubDate>Tue, 09 Jul 2019 09:06:50 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-tipo-de-dato-booleano-operadores-booleanos-y-de-comparacion/</guid>
      <description>Tipo de dato Booleano #  Otro tipo de datos básico es el tipo booleano, este tipo de dato puede contener unicamente dos valores, verdadero(true) o Falso(false), para tener acceso a este tipo de dato debemos incluir la biblioteca stdbool.h, la sintaxis es:
#include&amp;lt;stdbool.h&amp;gt; //Para declarar una variable bool un\_nombre; //Para definir un valor un\_nombre = true; un\_nombre = false; Es común asumir en C que cualquier valor diferente de cero o NULL es verdadero, sin embargo pienso que es mejor utilizar explícitamente los valores true o false para denotar valores booleanos, por razones de legibilidad.</description>
    </item>
    
    <item>
      <title>Programando Avr en C.- Funciones</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-funciones/</link>
      <pubDate>Sun, 07 Jul 2019 20:09:49 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-funciones/</guid>
      <description>Las funciones son características fundamentales de cualquier lenguaje de programación, inclusive existe un &amp;ldquo;estilo&amp;rdquo; de programación llamado programación funcional, veamos brevemente como funcionan las funciones en C. Una función tiene la siguiente sintaxis en C,
tipo_de_retorno nombre_de_funcion(tipo_dato argumento_n) { ... hacer_tareas ... return un_objeto_del_tipo_de_retorno; } las funciones pueden ser usadas como una forma de realizar tareas de manera reiterada, pueden recibir &amp;ldquo;n&amp;rdquo; cantidad de argumentos y retornar un valor, un ejemplo sencillo, definimos la función suma,</description>
    </item>
    
    <item>
      <title>Display Siete Segmentos I.</title>
      <link>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-ii-display-siete-segmentos/</link>
      <pubDate>Wed, 19 Jun 2019 04:37:56 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio-ii-display-siete-segmentos/</guid>
      <description>Escribamos un programa simple que nos muestre un número en un display de 7 segmentos, el circuito es el siguiente,
Conexión Arduino-Display
Contamos con un display de cátodo común por lo tanto cada segmento se enciende con un voltaje alto, es decir para encender el segmento &amp;ldquo;A&amp;rdquo; debemos configurar el pin digital D2 en alto. Evitamos la conexión en los pines D0 y D1, debido a que estos están conectados al convertidor serial-usb, y pueden provocar problemas para subir el código a la tarjeta.</description>
    </item>
    
    <item>
      <title>Electrónica básica.- Display de 7 segmentos.</title>
      <link>https://eleckia.000webhostapp.com/posts/electronica-basica-display-de-7-segmentos/</link>
      <pubDate>Sat, 15 Jun 2019 19:19:11 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/electronica-basica-display-de-7-segmentos/</guid>
      <description>Un display de 7 segmentos es un arreglo de leds distribuidos de una manera determinada, 8 leds en total, el display de 7 segmentos tiene el propósito de mostrar caracteres, usualmente números pero también puede mostrar letras.
Display 7 segmentos
el circuito equivalente es muy sencillo,
Cátodo común
esta configuración es llamada cátodo común, puesto que el cátodo de todos los diodos está en corto circuito, es una buena característica pues tenemos un solo pin para todos los cátodos y podemos usar un solo cable para la conexión en lugar de ocho.</description>
    </item>
    
    <item>
      <title>Electrónica básica.- Led y su resistencia.</title>
      <link>https://eleckia.000webhostapp.com/posts/electronica-basica-led-y-su-resistencia/</link>
      <pubDate>Fri, 14 Jun 2019 18:54:50 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/electronica-basica-led-y-su-resistencia/</guid>
      <description>La ley de Ohm es una herramienta fundamental en la electrónica, en esta ocasión vamos a calcular la resistencia adecuada para que un diodo pueda operar de forma segura.
Antes que nada definamos que es un diodo, sin entrar en detalles, un diodo es un dispositivo que permite el flujo de corriente en una sola dirección, cuenta con dos terminales, el ánodo y el cátodo, la regla es que si se conecta un voltaje alto al ánodo y uno bajo al cátodo, entonces fluye corriente, esta operación del diodo se conoce como polarización directa, si se invierten las conexiones se dice que el diodo esta polarizado en inversa y no fluye corriente.</description>
    </item>
    
    <item>
      <title>res</title>
      <link>https://eleckia.000webhostapp.com/posts/bloque-reutilizable-sin-titulo-2/</link>
      <pubDate>Fri, 14 Jun 2019 18:54:33 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/bloque-reutilizable-sin-titulo-2/</guid>
      <description>La ley de Ohm es una herramienta fundamental en la electrónica, en esta ocasión vamos a calcular la resistencia adecuada para que un diodo pueda operar de forma segura.
Antes que nada definamos que es un diodo, sin entrar en detalles, un diodo es un dispositivo que permite el flujo de corriente en una sola dirección, cuenta con dos terminales, el ánodo y cátodo, la regla es que si se conecta un voltaje alto al ánodo y uno bajo al cátodo, entonces fluye corriente, esta operación del diodo se conoce como polarización directa, si se invierten las conexiones se dice que el diodo esta polarizado en inversa y no fluye corriente.</description>
    </item>
    
    <item>
      <title>Programando Avr en C.- Variables y tipos, caracteres.</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-variables-y-tipos-caracteres/</link>
      <pubDate>Fri, 14 Jun 2019 16:18:27 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-variables-y-tipos-caracteres/</guid>
      <description>El tipo de variable char, sirve para guardar caracteres, generalmente el tamaño de este tipo es de 8 bits, por ello es común encontrar este tipo de dato en una gran cantidad de programas de 8 bits para almacenar resultados de operaciones con registros, sin embargo es preferible usar uint8_t, para un código consistente. El tipo char lo usaremos únicamente para lo que es, es decir para guardar un carácter, por ejemplo;</description>
    </item>
    
    <item>
      <title>Programando Avr en C.- Variables y tipos.- Enteros.</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-variables-y-tipos-enteros/</link>
      <pubDate>Fri, 14 Jun 2019 02:32:35 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-variables-y-tipos-enteros/</guid>
      <description>El lenguaje de programación C, es un lenguaje de tipo; tipado estático, esto quiere decir que nosotros debemos indicar el tipo de dato que guarda una variable. ¿Qué es una variable?, puede decirse que una variable es un espacio en memoria que guarda un valor determinado, y ¿qué es un tipo&#39;, en C los tipos de variables básicos (mejor llamados primitivos) son,
 Enteros, almacenan valores enteros, como: 1, 2, -100, 0b11111, 0x32, &amp;hellip; De punto Flotante, cantidades con decimales como: 1.</description>
    </item>
    
    <item>
      <title>Periféricos atmega328p.- Puertos de entrada/salida de propósito general (GPIO) I.</title>
      <link>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio/</link>
      <pubDate>Thu, 13 Jun 2019 19:18:09 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/perifericos/gpio/perifericos-atmega328p-puertos-de-entrada-salida-de-proposito-general-gpio/</guid>
      <description>Cando pensamos en programar microcontroladores, lo que queremos es hacer que el mundo se mueva, controlar un motor, un relevador, una lampara, altavoz, etc. Para ello los microcontroladores cuentan con una serie de periféricos.
A grandes rasgos un periférico puede definirse como: una interfaz que permite al microcontrolador comunicarse con el exterior, en esta entrada describiremos los puertos de entrada/salida de propósito general; GPIOx.
Según la hoja de datos el atmega328p tiene hasta 23 pines programables, cada uno con la posibilidad de ser programado individualmente, Arduino tiene 20 pines disponibles, pues 2 están destinados al reloj y el otro está destinado al pin de reset.</description>
    </item>
    
    <item>
      <title>Electrónica Básica.- Voltaje, Corriente, resistencia y ley de Ohm.</title>
      <link>https://eleckia.000webhostapp.com/posts/electronica-basica-voltaje-corriente-resistencia-y-ley-de-ohm/</link>
      <pubDate>Tue, 11 Jun 2019 14:56:24 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/electronica-basica-voltaje-corriente-resistencia-y-ley-de-ohm/</guid>
      <description>Cuando la gente de computación escucha las palabras en el titulo de esta entrada, suele entrar en pánico y no es para menos, el análisis de circuitos eléctricos puede llegar a ser muy complejo; sin embargo la electrónica descansa sobre una ley simple, la ley de Ohm,
$latex V = iR$
la ley de Ohm relaciona el voltaje con la corriente y la resistencia; pero esto no nos dice nada si no entendemos estos términos, comencemos con el voltaje, también llamado tensión o potencial eléctrico, en la física,</description>
    </item>
    
    <item>
      <title>¿Qué son los registros en un microcontrolador?</title>
      <link>https://eleckia.000webhostapp.com/posts/que-son-los-registros-en-un-microcontrolador/</link>
      <pubDate>Sat, 08 Jun 2019 15:46:28 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/que-son-los-registros-en-un-microcontrolador/</guid>
      <description>Hemos hablado acerca de los registros en anteriores entradas, vamos a profundizar un poco en el tema.
Para entender un registro, definamos que es un bit, la palabra tiene varias acepciones, para nuestro propósito un bit es la representación de un valor binario, este puede ser 1 o 0. Entonces un registro es sencillamente un conjunto de bits, en nuestro microcontrolador atmega328p, existen registros de 8bits, en otras arquitecturas como los cortex-m los registros son de 32 bits, algunos como el msp de texas instruments, tienen registros de 16 bits.</description>
    </item>
    
    <item>
      <title>Programando Avr en C.- Hola mundo</title>
      <link>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-hola-mundo/</link>
      <pubDate>Thu, 06 Jun 2019 21:11:38 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/avr/programando-avr-en-c-hola-mundo/</guid>
      <description>Antes de analizar el código Blink en C, explicaremos la estructura básica de un programa en C, el siguiente código muestra un programa mínimo
#include&amp;lt;bibliotecas.h&amp;gt; int main(void) { tipo1 variable1; tipo\_n variable\_n; while(1){ hacer\_cosas(var1, var2, varn); } return 0; } Al inicio de este listado tenemos una directiva del preprocesador, las directivas comienzan con un #, en este caso tenemos una directiva include, que le indica al compilador que copie el contenido del fichero bibliotecas.</description>
    </item>
    
    <item>
      <title>Arduino Básico III</title>
      <link>https://eleckia.000webhostapp.com/docs/workstation/arduino-basico-iii/</link>
      <pubDate>Thu, 06 Jun 2019 00:43:58 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/workstation/arduino-basico-iii/</guid>
      <description>El siguiente paso obvio es analizar el programa Blink, sin embargo aquí no usaremos las bibliotecas de Arduino, usaremos código c para dispositivos AVR, entonces ¿para que tanto problema instalando la maquina virtual y Arduino?, simplemente porque utilizaremos la infraestructura ya hecha para nuestro propósito, abrimos el ejemplo Blink y reemplazamos el código por:
#include&amp;lt;avr/io.h&amp;gt; #include&amp;lt;util/delay.h&amp;gt; int main(void) { DDRB = 1 &amp;lt;&amp;lt; PB5; PORTB = 0; while(1){ PORTB = 1 &amp;lt;&amp;lt; PB5; \_delay\_ms(1000); PORTB = 0; \_delay\_ms(1000); } return 0; } compilamos y subimos el código, el comportamiento es exactamente el mismo, pero el código es totalmente C y no C++, también evitamos el uso de las bibliotecas de Arduino en favor de las avr.</description>
    </item>
    
    <item>
      <title>save</title>
      <link>https://eleckia.000webhostapp.com/posts/bloque-reutilizable-sin-titulo/</link>
      <pubDate>Thu, 06 Jun 2019 00:35:42 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/bloque-reutilizable-sin-titulo/</guid>
      <description>El siguiente paso obvio es analizar el programa Blink, sin embargo aquí no usaremos las bibliotecas de Arduino, usaremos código c para dispositivos AVR, entonces ¿para que tanto problema instalando la maquina virtual y Arduino?, simplemente porque utilizaremos la infraestructura ya hecha para nuestro propósito, abrimos el ejemplo Blink y reemplazamos el código por:
#include&amp;lt;avr/io.h&amp;gt; #include&amp;lt;util/delay.h&amp;gt; int main(void) { DDRB = 1 &amp;lt;&amp;lt; PB5; PORTB = 0; while(1){ PORTB |= 1 &amp;lt;&amp;lt; PB5; \_delay\_ms(1000); PORTB &amp;amp;= ~(1&amp;lt;&amp;lt;PB5); \_delay\_ms(1000); } } compilamos y subimos el código, el comportamiento es exactamente el mismo, pero el código es totalmente C y no C++, también evitamos el uso de las bibliotecas de Arduino en favor de las avr.</description>
    </item>
    
    <item>
      <title>Arduino Básico II.- Hola Mundo</title>
      <link>https://eleckia.000webhostapp.com/docs/workstation/arduino-basico-ii-hola-mundo/</link>
      <pubDate>Wed, 05 Jun 2019 19:58:34 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/workstation/arduino-basico-ii-hola-mundo/</guid>
      <description>Prometo que ahora si comenzamos. :D
Conectamos nuestro Arduino a nuestra PC por medio del cable USB, si estas utilizando Virtual Box, es necesario que le des permiso al &amp;ldquo;invitado&amp;rdquo; para que use el puerto USB, esto se hace en el menú de Virtual Box, devices-&amp;gt;USB-&amp;gt; dispositivo correspondiente a Arduino(probablemente FTDI). Para verificar que nuestro Arduino esta conectado y lo reconoce el sistema, abrimos una terminal y tecleamos
[eleckia@tuxin-lp ~]$ dmesg si el dispositivo esta conectado obtendremos una salida similar a esta</description>
    </item>
    
    <item>
      <title>Arduino Básico I.</title>
      <link>https://eleckia.000webhostapp.com/docs/workstation/arduino-basico-i/</link>
      <pubDate>Wed, 05 Jun 2019 19:07:30 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/workstation/arduino-basico-i/</guid>
      <description>Comenzamos formalmente nuestro estudio, como se menciono anteriormente, Arduino se compone tanto de software como de hardware, miremos un poco el hardware.
El Arduino Uno (placa de desarrollo), cuenta con un puerto usb, por el que se alimenta la placa; enviamos y recibimos datos, este puerto esta conectado a un circuito integrado que no es más que un convertidor serial-usb, al mismo tiempo este convertidor se conecta a unos pines específicos del microcontrolador.</description>
    </item>
    
    <item>
      <title>Estación de trabajo IV</title>
      <link>https://eleckia.000webhostapp.com/docs/workstation/estacion-de-trabajo-iv/</link>
      <pubDate>Wed, 05 Jun 2019 17:33:32 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/workstation/estacion-de-trabajo-iv/</guid>
      <description>Finalizamos esta serie de post iniciales con una lista de materiales recomendada, en ebay existen una gran variedad de paquetes donde se incluyen Arduinos, resistencias, capacitores, transistores y algunos sensores, basta con ir a ebay o mercadolibre y buscar kit Arduino, adquirir uno de ellos es un buen comienzo, personalmente recomiendo,
https://www.ebay.com/itm/UNO-R3-Updated-version-of-the-RFID-Starter-Kit-LCD-learn-Suite-1602-for-Arduino/201644819283?hash=item2ef2f7c353:g:UroAAOSwIgNXrjMk
igualmente puedes adquirir kits de resistencias, capacitores y leds, además de jumpers, cables y un par de atmega328p DIP adicionales.</description>
    </item>
    
    <item>
      <title>Estación de trabajo III</title>
      <link>https://eleckia.000webhostapp.com/docs/workstation/estacion-de-trabajo-iii/</link>
      <pubDate>Wed, 05 Jun 2019 03:56:02 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/workstation/estacion-de-trabajo-iii/</guid>
      <description>Ya casi estamos listos, damos click en Actividades y abrimos una terminal, la terminal puede ser intimidante, pero creeme una vez te acostumbres a ella la amaras.
En los sistemas linux tenemos diferentes tipos de usuarios cada uno de ellos con diferentes privilegios, el usuario con más privilegios es el usuario root, puede hacer y deshacer el sistema, nuestro usuario por defecto tiene pocos privilegios para evitar que el usuario pueda romper el sistema por accidente.</description>
    </item>
    
    <item>
      <title>Estación de trabajo II</title>
      <link>https://eleckia.000webhostapp.com/docs/workstation/estacion-de-trabajo-ii/</link>
      <pubDate>Wed, 05 Jun 2019 02:24:29 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/workstation/estacion-de-trabajo-ii/</guid>
      <description>En este post instalaremos Fedora en la maquina virtual.
Abrimos VirtualBox y seleccionamos la maquina virtual Fedora que creamos anteriormente, ahora damos click en Configuración, se nos abrirá una nueva ventana, seleccionamos Almacenamiento y en controlador IDE, seleccionamos Vació, a la derecha de unidad óptica damos click en el icono de un disco azul y seleccionamos el .iso de Fedora que descargamos anteriormente, finalmente damos click en aceptar.
Si tienes anfitrión linux, ahí mismo en configuración seleccionamos Pantalla y cambiamos Controlador Gráfico a VBoxVGA y aumenta la memoria de video a por lo menos 64MB.</description>
    </item>
    
    <item>
      <title>Estación de trabajo I</title>
      <link>https://eleckia.000webhostapp.com/docs/workstation/estacion-de-trabajo-i/</link>
      <pubDate>Tue, 04 Jun 2019 22:52:26 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/docs/workstation/estacion-de-trabajo-i/</guid>
      <description>No es obligatorio instalar Fedora, pero todos los ejemplos se harán desde este sistema operativo, eres libre de adaptar lo que aquí se mencione a tus circunstancias.
Para poder trabajar a gusto es necesario disponer de un conjunto de herramientas adecuado, dejando de lado el tipo de computadora con la que se cuenta, lo importante es el sistema operativo, como se menciono en el post anterior utilizaremos software libre, por lo que nuestro sistema operativo sera linux, concretamente Fedora, esta distribución cuenta con los paquetes necesarios para nuestros propósitos, así que si utilizas algo diferente comienza borrado tu disco duro e instala Fedora (esto es broma obviamente).</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://eleckia.000webhostapp.com/posts/about/</link>
      <pubDate>Sun, 20 Sep 2015 19:44:10 +0000</pubDate>
      
      <guid>https://eleckia.000webhostapp.com/posts/about/</guid>
      <description>This is an example of a page. Unlike posts, which are displayed on your blog’s front page in the order they’re published, pages are better suited for more timeless content that you want to be easily accessible, like your About or Contact information. Click the Edit link to make changes to this page or add another page.</description>
    </item>
    
  </channel>
</rss>
